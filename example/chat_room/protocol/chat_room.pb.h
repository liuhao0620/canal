// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_room.proto

#ifndef PROTOBUF_chat_5froom_2eproto__INCLUDED
#define PROTOBUF_chat_5froom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_chat_5froom_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultscanal_rpc_requestImpl();
void InitDefaultscanal_rpc_request();
void InitDefaultscanal_rpc_responseImpl();
void InitDefaultscanal_rpc_response();
void InitDefaultscommon_responseImpl();
void InitDefaultscommon_response();
void InitDefaultslogin_requestImpl();
void InitDefaultslogin_request();
void InitDefaultslogin_responseImpl();
void InitDefaultslogin_response();
void InitDefaultschat_messageImpl();
void InitDefaultschat_message();
inline void InitDefaults() {
  InitDefaultscanal_rpc_request();
  InitDefaultscanal_rpc_response();
  InitDefaultscommon_response();
  InitDefaultslogin_request();
  InitDefaultslogin_response();
  InitDefaultschat_message();
}
}  // namespace protobuf_chat_5froom_2eproto
namespace chat_room {
class canal_rpc_request;
class canal_rpc_requestDefaultTypeInternal;
extern canal_rpc_requestDefaultTypeInternal _canal_rpc_request_default_instance_;
class canal_rpc_response;
class canal_rpc_responseDefaultTypeInternal;
extern canal_rpc_responseDefaultTypeInternal _canal_rpc_response_default_instance_;
class chat_message;
class chat_messageDefaultTypeInternal;
extern chat_messageDefaultTypeInternal _chat_message_default_instance_;
class common_response;
class common_responseDefaultTypeInternal;
extern common_responseDefaultTypeInternal _common_response_default_instance_;
class login_request;
class login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class login_response;
class login_responseDefaultTypeInternal;
extern login_responseDefaultTypeInternal _login_response_default_instance_;
}  // namespace chat_room
namespace chat_room {

enum message_id {
  mid_invalid = 0,
  mid_canal_rpc_request = 1,
  mid_canal_rpc_response = 2,
  mid_common_response = 16,
  mid_login_request = 17,
  mid_login_response = 18,
  mid_chat_message = 19,
  message_id_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  message_id_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool message_id_IsValid(int value);
const message_id message_id_MIN = mid_invalid;
const message_id message_id_MAX = mid_chat_message;
const int message_id_ARRAYSIZE = message_id_MAX + 1;

const ::google::protobuf::EnumDescriptor* message_id_descriptor();
inline const ::std::string& message_id_Name(message_id value) {
  return ::google::protobuf::internal::NameOfEnum(
    message_id_descriptor(), value);
}
inline bool message_id_Parse(
    const ::std::string& name, message_id* value) {
  return ::google::protobuf::internal::ParseNamedEnum<message_id>(
    message_id_descriptor(), name, value);
}
enum response_error_code {
  success = 0,
  rpc_timeout = 1,
  unknown_error = 2,
  response_error_code_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  response_error_code_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool response_error_code_IsValid(int value);
const response_error_code response_error_code_MIN = success;
const response_error_code response_error_code_MAX = unknown_error;
const int response_error_code_ARRAYSIZE = response_error_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* response_error_code_descriptor();
inline const ::std::string& response_error_code_Name(response_error_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    response_error_code_descriptor(), value);
}
inline bool response_error_code_Parse(
    const ::std::string& name, response_error_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<response_error_code>(
    response_error_code_descriptor(), name, value);
}
// ===================================================================

class canal_rpc_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_room.canal_rpc_request) */ {
 public:
  canal_rpc_request();
  virtual ~canal_rpc_request();

  canal_rpc_request(const canal_rpc_request& from);

  inline canal_rpc_request& operator=(const canal_rpc_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  canal_rpc_request(canal_rpc_request&& from) noexcept
    : canal_rpc_request() {
    *this = ::std::move(from);
  }

  inline canal_rpc_request& operator=(canal_rpc_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const canal_rpc_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const canal_rpc_request* internal_default_instance() {
    return reinterpret_cast<const canal_rpc_request*>(
               &_canal_rpc_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(canal_rpc_request* other);
  friend void swap(canal_rpc_request& a, canal_rpc_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline canal_rpc_request* New() const PROTOBUF_FINAL { return New(NULL); }

  canal_rpc_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const canal_rpc_request& from);
  void MergeFrom(const canal_rpc_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(canal_rpc_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes request_body = 3;
  void clear_request_body();
  static const int kRequestBodyFieldNumber = 3;
  const ::std::string& request_body() const;
  void set_request_body(const ::std::string& value);
  #if LANG_CXX11
  void set_request_body(::std::string&& value);
  #endif
  void set_request_body(const char* value);
  void set_request_body(const void* value, size_t size);
  ::std::string* mutable_request_body();
  ::std::string* release_request_body();
  void set_allocated_request_body(::std::string* request_body);

  // uint64 serial_number = 1;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  ::google::protobuf::uint64 serial_number() const;
  void set_serial_number(::google::protobuf::uint64 value);

  // .chat_room.message_id request_message_id = 2;
  void clear_request_message_id();
  static const int kRequestMessageIdFieldNumber = 2;
  ::chat_room::message_id request_message_id() const;
  void set_request_message_id(::chat_room::message_id value);

  // @@protoc_insertion_point(class_scope:chat_room.canal_rpc_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_body_;
  ::google::protobuf::uint64 serial_number_;
  int request_message_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_chat_5froom_2eproto::TableStruct;
  friend void ::protobuf_chat_5froom_2eproto::InitDefaultscanal_rpc_requestImpl();
};
// -------------------------------------------------------------------

class canal_rpc_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_room.canal_rpc_response) */ {
 public:
  canal_rpc_response();
  virtual ~canal_rpc_response();

  canal_rpc_response(const canal_rpc_response& from);

  inline canal_rpc_response& operator=(const canal_rpc_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  canal_rpc_response(canal_rpc_response&& from) noexcept
    : canal_rpc_response() {
    *this = ::std::move(from);
  }

  inline canal_rpc_response& operator=(canal_rpc_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const canal_rpc_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const canal_rpc_response* internal_default_instance() {
    return reinterpret_cast<const canal_rpc_response*>(
               &_canal_rpc_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(canal_rpc_response* other);
  friend void swap(canal_rpc_response& a, canal_rpc_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline canal_rpc_response* New() const PROTOBUF_FINAL { return New(NULL); }

  canal_rpc_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const canal_rpc_response& from);
  void MergeFrom(const canal_rpc_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(canal_rpc_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes response_body = 2;
  void clear_response_body();
  static const int kResponseBodyFieldNumber = 2;
  const ::std::string& response_body() const;
  void set_response_body(const ::std::string& value);
  #if LANG_CXX11
  void set_response_body(::std::string&& value);
  #endif
  void set_response_body(const char* value);
  void set_response_body(const void* value, size_t size);
  ::std::string* mutable_response_body();
  ::std::string* release_response_body();
  void set_allocated_response_body(::std::string* response_body);

  // uint64 serial_number = 1;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  ::google::protobuf::uint64 serial_number() const;
  void set_serial_number(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_room.canal_rpc_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_body_;
  ::google::protobuf::uint64 serial_number_;
  mutable int _cached_size_;
  friend struct ::protobuf_chat_5froom_2eproto::TableStruct;
  friend void ::protobuf_chat_5froom_2eproto::InitDefaultscanal_rpc_responseImpl();
};
// -------------------------------------------------------------------

class common_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_room.common_response) */ {
 public:
  common_response();
  virtual ~common_response();

  common_response(const common_response& from);

  inline common_response& operator=(const common_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  common_response(common_response&& from) noexcept
    : common_response() {
    *this = ::std::move(from);
  }

  inline common_response& operator=(common_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const common_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const common_response* internal_default_instance() {
    return reinterpret_cast<const common_response*>(
               &_common_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(common_response* other);
  friend void swap(common_response& a, common_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline common_response* New() const PROTOBUF_FINAL { return New(NULL); }

  common_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const common_response& from);
  void MergeFrom(const common_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(common_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chat_room.response_error_code error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::chat_room::response_error_code error_code() const;
  void set_error_code(::chat_room::response_error_code value);

  // @@protoc_insertion_point(class_scope:chat_room.common_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_chat_5froom_2eproto::TableStruct;
  friend void ::protobuf_chat_5froom_2eproto::InitDefaultscommon_responseImpl();
};
// -------------------------------------------------------------------

class login_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_room.login_request) */ {
 public:
  login_request();
  virtual ~login_request();

  login_request(const login_request& from);

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(login_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const login_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(login_request* other);
  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_request* New() const PROTOBUF_FINAL { return New(NULL); }

  login_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chat_room.login_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct ::protobuf_chat_5froom_2eproto::TableStruct;
  friend void ::protobuf_chat_5froom_2eproto::InitDefaultslogin_requestImpl();
};
// -------------------------------------------------------------------

class login_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_room.login_response) */ {
 public:
  login_response();
  virtual ~login_response();

  login_response(const login_response& from);

  inline login_response& operator=(const login_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_response(login_response&& from) noexcept
    : login_response() {
    *this = ::std::move(from);
  }

  inline login_response& operator=(login_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const login_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login_response* internal_default_instance() {
    return reinterpret_cast<const login_response*>(
               &_login_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(login_response* other);
  friend void swap(login_response& a, login_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_response* New() const PROTOBUF_FINAL { return New(NULL); }

  login_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_response& from);
  void MergeFrom(const login_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 2;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // .chat_room.response_error_code error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::chat_room::response_error_code error_code() const;
  void set_error_code(::chat_room::response_error_code value);

  // @@protoc_insertion_point(class_scope:chat_room.login_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  int error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_chat_5froom_2eproto::TableStruct;
  friend void ::protobuf_chat_5froom_2eproto::InitDefaultslogin_responseImpl();
};
// -------------------------------------------------------------------

class chat_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_room.chat_message) */ {
 public:
  chat_message();
  virtual ~chat_message();

  chat_message(const chat_message& from);

  inline chat_message& operator=(const chat_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  chat_message(chat_message&& from) noexcept
    : chat_message() {
    *this = ::std::move(from);
  }

  inline chat_message& operator=(chat_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chat_message* internal_default_instance() {
    return reinterpret_cast<const chat_message*>(
               &_chat_message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(chat_message* other);
  friend void swap(chat_message& a, chat_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline chat_message* New() const PROTOBUF_FINAL { return New(NULL); }

  chat_message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const chat_message& from);
  void MergeFrom(const chat_message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(chat_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:chat_room.chat_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_chat_5froom_2eproto::TableStruct;
  friend void ::protobuf_chat_5froom_2eproto::InitDefaultschat_messageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// canal_rpc_request

// uint64 serial_number = 1;
inline void canal_rpc_request::clear_serial_number() {
  serial_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 canal_rpc_request::serial_number() const {
  // @@protoc_insertion_point(field_get:chat_room.canal_rpc_request.serial_number)
  return serial_number_;
}
inline void canal_rpc_request::set_serial_number(::google::protobuf::uint64 value) {
  
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:chat_room.canal_rpc_request.serial_number)
}

// .chat_room.message_id request_message_id = 2;
inline void canal_rpc_request::clear_request_message_id() {
  request_message_id_ = 0;
}
inline ::chat_room::message_id canal_rpc_request::request_message_id() const {
  // @@protoc_insertion_point(field_get:chat_room.canal_rpc_request.request_message_id)
  return static_cast< ::chat_room::message_id >(request_message_id_);
}
inline void canal_rpc_request::set_request_message_id(::chat_room::message_id value) {
  
  request_message_id_ = value;
  // @@protoc_insertion_point(field_set:chat_room.canal_rpc_request.request_message_id)
}

// bytes request_body = 3;
inline void canal_rpc_request::clear_request_body() {
  request_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& canal_rpc_request::request_body() const {
  // @@protoc_insertion_point(field_get:chat_room.canal_rpc_request.request_body)
  return request_body_.GetNoArena();
}
inline void canal_rpc_request::set_request_body(const ::std::string& value) {
  
  request_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.canal_rpc_request.request_body)
}
#if LANG_CXX11
inline void canal_rpc_request::set_request_body(::std::string&& value) {
  
  request_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.canal_rpc_request.request_body)
}
#endif
inline void canal_rpc_request::set_request_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.canal_rpc_request.request_body)
}
inline void canal_rpc_request::set_request_body(const void* value, size_t size) {
  
  request_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.canal_rpc_request.request_body)
}
inline ::std::string* canal_rpc_request::mutable_request_body() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.canal_rpc_request.request_body)
  return request_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* canal_rpc_request::release_request_body() {
  // @@protoc_insertion_point(field_release:chat_room.canal_rpc_request.request_body)
  
  return request_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void canal_rpc_request::set_allocated_request_body(::std::string* request_body) {
  if (request_body != NULL) {
    
  } else {
    
  }
  request_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_body);
  // @@protoc_insertion_point(field_set_allocated:chat_room.canal_rpc_request.request_body)
}

// -------------------------------------------------------------------

// canal_rpc_response

// uint64 serial_number = 1;
inline void canal_rpc_response::clear_serial_number() {
  serial_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 canal_rpc_response::serial_number() const {
  // @@protoc_insertion_point(field_get:chat_room.canal_rpc_response.serial_number)
  return serial_number_;
}
inline void canal_rpc_response::set_serial_number(::google::protobuf::uint64 value) {
  
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:chat_room.canal_rpc_response.serial_number)
}

// bytes response_body = 2;
inline void canal_rpc_response::clear_response_body() {
  response_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& canal_rpc_response::response_body() const {
  // @@protoc_insertion_point(field_get:chat_room.canal_rpc_response.response_body)
  return response_body_.GetNoArena();
}
inline void canal_rpc_response::set_response_body(const ::std::string& value) {
  
  response_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.canal_rpc_response.response_body)
}
#if LANG_CXX11
inline void canal_rpc_response::set_response_body(::std::string&& value) {
  
  response_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.canal_rpc_response.response_body)
}
#endif
inline void canal_rpc_response::set_response_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.canal_rpc_response.response_body)
}
inline void canal_rpc_response::set_response_body(const void* value, size_t size) {
  
  response_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.canal_rpc_response.response_body)
}
inline ::std::string* canal_rpc_response::mutable_response_body() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.canal_rpc_response.response_body)
  return response_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* canal_rpc_response::release_response_body() {
  // @@protoc_insertion_point(field_release:chat_room.canal_rpc_response.response_body)
  
  return response_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void canal_rpc_response::set_allocated_response_body(::std::string* response_body) {
  if (response_body != NULL) {
    
  } else {
    
  }
  response_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_body);
  // @@protoc_insertion_point(field_set_allocated:chat_room.canal_rpc_response.response_body)
}

// -------------------------------------------------------------------

// common_response

// .chat_room.response_error_code error_code = 1;
inline void common_response::clear_error_code() {
  error_code_ = 0;
}
inline ::chat_room::response_error_code common_response::error_code() const {
  // @@protoc_insertion_point(field_get:chat_room.common_response.error_code)
  return static_cast< ::chat_room::response_error_code >(error_code_);
}
inline void common_response::set_error_code(::chat_room::response_error_code value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:chat_room.common_response.error_code)
}

// -------------------------------------------------------------------

// login_request

// string account = 1;
inline void login_request::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_request::account() const {
  // @@protoc_insertion_point(field_get:chat_room.login_request.account)
  return account_.GetNoArena();
}
inline void login_request::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.login_request.account)
}
#if LANG_CXX11
inline void login_request::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.login_request.account)
}
#endif
inline void login_request::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.login_request.account)
}
inline void login_request::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.login_request.account)
}
inline ::std::string* login_request::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.login_request.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_request::release_account() {
  // @@protoc_insertion_point(field_release:chat_room.login_request.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_request::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:chat_room.login_request.account)
}

// string password = 2;
inline void login_request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_request::password() const {
  // @@protoc_insertion_point(field_get:chat_room.login_request.password)
  return password_.GetNoArena();
}
inline void login_request::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.login_request.password)
}
#if LANG_CXX11
inline void login_request::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.login_request.password)
}
#endif
inline void login_request::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.login_request.password)
}
inline void login_request::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.login_request.password)
}
inline ::std::string* login_request::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.login_request.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_request::release_password() {
  // @@protoc_insertion_point(field_release:chat_room.login_request.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_request::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat_room.login_request.password)
}

// -------------------------------------------------------------------

// login_response

// .chat_room.response_error_code error_code = 1;
inline void login_response::clear_error_code() {
  error_code_ = 0;
}
inline ::chat_room::response_error_code login_response::error_code() const {
  // @@protoc_insertion_point(field_get:chat_room.login_response.error_code)
  return static_cast< ::chat_room::response_error_code >(error_code_);
}
inline void login_response::set_error_code(::chat_room::response_error_code value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:chat_room.login_response.error_code)
}

// string user_name = 2;
inline void login_response::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_response::user_name() const {
  // @@protoc_insertion_point(field_get:chat_room.login_response.user_name)
  return user_name_.GetNoArena();
}
inline void login_response::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.login_response.user_name)
}
#if LANG_CXX11
inline void login_response::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.login_response.user_name)
}
#endif
inline void login_response::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.login_response.user_name)
}
inline void login_response::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.login_response.user_name)
}
inline ::std::string* login_response::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.login_response.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_response::release_user_name() {
  // @@protoc_insertion_point(field_release:chat_room.login_response.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_response::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:chat_room.login_response.user_name)
}

// -------------------------------------------------------------------

// chat_message

// string from = 1;
inline void chat_message::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& chat_message::from() const {
  // @@protoc_insertion_point(field_get:chat_room.chat_message.from)
  return from_.GetNoArena();
}
inline void chat_message::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.chat_message.from)
}
#if LANG_CXX11
inline void chat_message::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.chat_message.from)
}
#endif
inline void chat_message::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.chat_message.from)
}
inline void chat_message::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.chat_message.from)
}
inline ::std::string* chat_message::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.chat_message.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* chat_message::release_from() {
  // @@protoc_insertion_point(field_release:chat_room.chat_message.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void chat_message::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:chat_room.chat_message.from)
}

// string to = 2;
inline void chat_message::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& chat_message::to() const {
  // @@protoc_insertion_point(field_get:chat_room.chat_message.to)
  return to_.GetNoArena();
}
inline void chat_message::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.chat_message.to)
}
#if LANG_CXX11
inline void chat_message::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.chat_message.to)
}
#endif
inline void chat_message::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.chat_message.to)
}
inline void chat_message::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.chat_message.to)
}
inline ::std::string* chat_message::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.chat_message.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* chat_message::release_to() {
  // @@protoc_insertion_point(field_release:chat_room.chat_message.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void chat_message::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:chat_room.chat_message.to)
}

// string message = 3;
inline void chat_message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& chat_message::message() const {
  // @@protoc_insertion_point(field_get:chat_room.chat_message.message)
  return message_.GetNoArena();
}
inline void chat_message::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_room.chat_message.message)
}
#if LANG_CXX11
inline void chat_message::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_room.chat_message.message)
}
#endif
inline void chat_message::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_room.chat_message.message)
}
inline void chat_message::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_room.chat_message.message)
}
inline ::std::string* chat_message::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:chat_room.chat_message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* chat_message::release_message() {
  // @@protoc_insertion_point(field_release:chat_room.chat_message.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void chat_message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat_room.chat_message.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat_room

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat_room::message_id> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_room::message_id>() {
  return ::chat_room::message_id_descriptor();
}
template <> struct is_proto_enum< ::chat_room::response_error_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_room::response_error_code>() {
  return ::chat_room::response_error_code_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_5froom_2eproto__INCLUDED
