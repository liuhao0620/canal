// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_room.proto

#include "chat_room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace chat_room {
class canal_rpc_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<canal_rpc_request>
      _instance;
} _canal_rpc_request_default_instance_;
class canal_rpc_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<canal_rpc_response>
      _instance;
} _canal_rpc_response_default_instance_;
class common_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<common_response>
      _instance;
} _common_response_default_instance_;
class login_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login_request>
      _instance;
} _login_request_default_instance_;
class login_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<login_response>
      _instance;
} _login_response_default_instance_;
class chat_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<chat_message>
      _instance;
} _chat_message_default_instance_;
}  // namespace chat_room
namespace protobuf_chat_5froom_2eproto {
void InitDefaultscanal_rpc_requestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat_room::_canal_rpc_request_default_instance_;
    new (ptr) ::chat_room::canal_rpc_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_room::canal_rpc_request::InitAsDefaultInstance();
}

void InitDefaultscanal_rpc_request() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscanal_rpc_requestImpl);
}

void InitDefaultscanal_rpc_responseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat_room::_canal_rpc_response_default_instance_;
    new (ptr) ::chat_room::canal_rpc_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_room::canal_rpc_response::InitAsDefaultInstance();
}

void InitDefaultscanal_rpc_response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscanal_rpc_responseImpl);
}

void InitDefaultscommon_responseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat_room::_common_response_default_instance_;
    new (ptr) ::chat_room::common_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_room::common_response::InitAsDefaultInstance();
}

void InitDefaultscommon_response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommon_responseImpl);
}

void InitDefaultslogin_requestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat_room::_login_request_default_instance_;
    new (ptr) ::chat_room::login_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_room::login_request::InitAsDefaultInstance();
}

void InitDefaultslogin_request() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultslogin_requestImpl);
}

void InitDefaultslogin_responseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat_room::_login_response_default_instance_;
    new (ptr) ::chat_room::login_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_room::login_response::InitAsDefaultInstance();
}

void InitDefaultslogin_response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultslogin_responseImpl);
}

void InitDefaultschat_messageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat_room::_chat_message_default_instance_;
    new (ptr) ::chat_room::chat_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_room::chat_message::InitAsDefaultInstance();
}

void InitDefaultschat_message() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultschat_messageImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_request, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_request, request_message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_request, request_body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_response, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::canal_rpc_response, response_body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::common_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::common_response, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::login_request, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::login_request, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::login_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::login_response, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::login_response, user_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::chat_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::chat_message, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::chat_message, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_room::chat_message, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chat_room::canal_rpc_request)},
  { 8, -1, sizeof(::chat_room::canal_rpc_response)},
  { 15, -1, sizeof(::chat_room::common_response)},
  { 21, -1, sizeof(::chat_room::login_request)},
  { 28, -1, sizeof(::chat_room::login_response)},
  { 35, -1, sizeof(::chat_room::chat_message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_room::_canal_rpc_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_room::_canal_rpc_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_room::_common_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_room::_login_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_room::_login_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_room::_chat_message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "chat_room.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017chat_room.proto\022\tchat_room\"s\n\021canal_rp"
      "c_request\022\025\n\rserial_number\030\001 \001(\004\0221\n\022requ"
      "est_message_id\030\002 \001(\0162\025.chat_room.message"
      "_id\022\024\n\014request_body\030\003 \001(\014\"B\n\022canal_rpc_r"
      "esponse\022\025\n\rserial_number\030\001 \001(\004\022\025\n\rrespon"
      "se_body\030\002 \001(\014\"E\n\017common_response\0222\n\nerro"
      "r_code\030\001 \001(\0162\036.chat_room.response_error_"
      "code\"2\n\rlogin_request\022\017\n\007account\030\001 \001(\t\022\020"
      "\n\010password\030\002 \001(\t\"W\n\016login_response\0222\n\ner"
      "ror_code\030\001 \001(\0162\036.chat_room.response_erro"
      "r_code\022\021\n\tuser_name\030\002 \001(\t\"9\n\014chat_messag"
      "e\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\017\n\007message\030\003"
      " \001(\t*\262\001\n\nmessage_id\022\017\n\013mid_invalid\020\000\022\031\n\025"
      "mid_canal_rpc_request\020\001\022\032\n\026mid_canal_rpc"
      "_response\020\002\022\027\n\023mid_common_response\020\020\022\025\n\021"
      "mid_login_request\020\021\022\026\n\022mid_login_respons"
      "e\020\022\022\024\n\020mid_chat_message\020\023*F\n\023response_er"
      "ror_code\022\013\n\007success\020\000\022\017\n\013rpc_timeout\020\001\022\021"
      "\n\runknown_error\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 745);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat_room.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chat_5froom_2eproto
namespace chat_room {
const ::google::protobuf::EnumDescriptor* message_id_descriptor() {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5froom_2eproto::file_level_enum_descriptors[0];
}
bool message_id_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* response_error_code_descriptor() {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5froom_2eproto::file_level_enum_descriptors[1];
}
bool response_error_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void canal_rpc_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int canal_rpc_request::kSerialNumberFieldNumber;
const int canal_rpc_request::kRequestMessageIdFieldNumber;
const int canal_rpc_request::kRequestBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

canal_rpc_request::canal_rpc_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_5froom_2eproto::InitDefaultscanal_rpc_request();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_room.canal_rpc_request)
}
canal_rpc_request::canal_rpc_request(const canal_rpc_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_body().size() > 0) {
    request_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_body_);
  }
  ::memcpy(&serial_number_, &from.serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_message_id_) -
    reinterpret_cast<char*>(&serial_number_)) + sizeof(request_message_id_));
  // @@protoc_insertion_point(copy_constructor:chat_room.canal_rpc_request)
}

void canal_rpc_request::SharedCtor() {
  request_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_message_id_) -
      reinterpret_cast<char*>(&serial_number_)) + sizeof(request_message_id_));
  _cached_size_ = 0;
}

canal_rpc_request::~canal_rpc_request() {
  // @@protoc_insertion_point(destructor:chat_room.canal_rpc_request)
  SharedDtor();
}

void canal_rpc_request::SharedDtor() {
  request_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void canal_rpc_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* canal_rpc_request::descriptor() {
  ::protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const canal_rpc_request& canal_rpc_request::default_instance() {
  ::protobuf_chat_5froom_2eproto::InitDefaultscanal_rpc_request();
  return *internal_default_instance();
}

canal_rpc_request* canal_rpc_request::New(::google::protobuf::Arena* arena) const {
  canal_rpc_request* n = new canal_rpc_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void canal_rpc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_room.canal_rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_message_id_) -
      reinterpret_cast<char*>(&serial_number_)) + sizeof(request_message_id_));
  _internal_metadata_.Clear();
}

bool canal_rpc_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_room.canal_rpc_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serial_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat_room.message_id request_message_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_request_message_id(static_cast< ::chat_room::message_id >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes request_body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_room.canal_rpc_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_room.canal_rpc_request)
  return false;
#undef DO_
}

void canal_rpc_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_room.canal_rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_number = 1;
  if (this->serial_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serial_number(), output);
  }

  // .chat_room.message_id request_message_id = 2;
  if (this->request_message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_message_id(), output);
  }

  // bytes request_body = 3;
  if (this->request_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->request_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_room.canal_rpc_request)
}

::google::protobuf::uint8* canal_rpc_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_room.canal_rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_number = 1;
  if (this->serial_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serial_number(), target);
  }

  // .chat_room.message_id request_message_id = 2;
  if (this->request_message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->request_message_id(), target);
  }

  // bytes request_body = 3;
  if (this->request_body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->request_body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_room.canal_rpc_request)
  return target;
}

size_t canal_rpc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_room.canal_rpc_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes request_body = 3;
  if (this->request_body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->request_body());
  }

  // uint64 serial_number = 1;
  if (this->serial_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serial_number());
  }

  // .chat_room.message_id request_message_id = 2;
  if (this->request_message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void canal_rpc_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_room.canal_rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  const canal_rpc_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const canal_rpc_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_room.canal_rpc_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_room.canal_rpc_request)
    MergeFrom(*source);
  }
}

void canal_rpc_request::MergeFrom(const canal_rpc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_room.canal_rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_body().size() > 0) {

    request_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_body_);
  }
  if (from.serial_number() != 0) {
    set_serial_number(from.serial_number());
  }
  if (from.request_message_id() != 0) {
    set_request_message_id(from.request_message_id());
  }
}

void canal_rpc_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_room.canal_rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void canal_rpc_request::CopyFrom(const canal_rpc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_room.canal_rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool canal_rpc_request::IsInitialized() const {
  return true;
}

void canal_rpc_request::Swap(canal_rpc_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void canal_rpc_request::InternalSwap(canal_rpc_request* other) {
  using std::swap;
  request_body_.Swap(&other->request_body_);
  swap(serial_number_, other->serial_number_);
  swap(request_message_id_, other->request_message_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata canal_rpc_request::GetMetadata() const {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void canal_rpc_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int canal_rpc_response::kSerialNumberFieldNumber;
const int canal_rpc_response::kResponseBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

canal_rpc_response::canal_rpc_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_5froom_2eproto::InitDefaultscanal_rpc_response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_room.canal_rpc_response)
}
canal_rpc_response::canal_rpc_response(const canal_rpc_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_body().size() > 0) {
    response_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_body_);
  }
  serial_number_ = from.serial_number_;
  // @@protoc_insertion_point(copy_constructor:chat_room.canal_rpc_response)
}

void canal_rpc_response::SharedCtor() {
  response_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

canal_rpc_response::~canal_rpc_response() {
  // @@protoc_insertion_point(destructor:chat_room.canal_rpc_response)
  SharedDtor();
}

void canal_rpc_response::SharedDtor() {
  response_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void canal_rpc_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* canal_rpc_response::descriptor() {
  ::protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const canal_rpc_response& canal_rpc_response::default_instance() {
  ::protobuf_chat_5froom_2eproto::InitDefaultscanal_rpc_response();
  return *internal_default_instance();
}

canal_rpc_response* canal_rpc_response::New(::google::protobuf::Arena* arena) const {
  canal_rpc_response* n = new canal_rpc_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void canal_rpc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_room.canal_rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool canal_rpc_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_room.canal_rpc_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serial_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes response_body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_room.canal_rpc_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_room.canal_rpc_response)
  return false;
#undef DO_
}

void canal_rpc_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_room.canal_rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_number = 1;
  if (this->serial_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serial_number(), output);
  }

  // bytes response_body = 2;
  if (this->response_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->response_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_room.canal_rpc_response)
}

::google::protobuf::uint8* canal_rpc_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_room.canal_rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_number = 1;
  if (this->serial_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serial_number(), target);
  }

  // bytes response_body = 2;
  if (this->response_body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response_body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_room.canal_rpc_response)
  return target;
}

size_t canal_rpc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_room.canal_rpc_response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes response_body = 2;
  if (this->response_body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response_body());
  }

  // uint64 serial_number = 1;
  if (this->serial_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serial_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void canal_rpc_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_room.canal_rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  const canal_rpc_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const canal_rpc_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_room.canal_rpc_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_room.canal_rpc_response)
    MergeFrom(*source);
  }
}

void canal_rpc_response::MergeFrom(const canal_rpc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_room.canal_rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_body().size() > 0) {

    response_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_body_);
  }
  if (from.serial_number() != 0) {
    set_serial_number(from.serial_number());
  }
}

void canal_rpc_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_room.canal_rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void canal_rpc_response::CopyFrom(const canal_rpc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_room.canal_rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool canal_rpc_response::IsInitialized() const {
  return true;
}

void canal_rpc_response::Swap(canal_rpc_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void canal_rpc_response::InternalSwap(canal_rpc_response* other) {
  using std::swap;
  response_body_.Swap(&other->response_body_);
  swap(serial_number_, other->serial_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata canal_rpc_response::GetMetadata() const {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void common_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int common_response::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

common_response::common_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_5froom_2eproto::InitDefaultscommon_response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_room.common_response)
}
common_response::common_response(const common_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:chat_room.common_response)
}

void common_response::SharedCtor() {
  error_code_ = 0;
  _cached_size_ = 0;
}

common_response::~common_response() {
  // @@protoc_insertion_point(destructor:chat_room.common_response)
  SharedDtor();
}

void common_response::SharedDtor() {
}

void common_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* common_response::descriptor() {
  ::protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const common_response& common_response::default_instance() {
  ::protobuf_chat_5froom_2eproto::InitDefaultscommon_response();
  return *internal_default_instance();
}

common_response* common_response::New(::google::protobuf::Arena* arena) const {
  common_response* n = new common_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void common_response::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_room.common_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool common_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_room.common_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chat_room.response_error_code error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::chat_room::response_error_code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_room.common_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_room.common_response)
  return false;
#undef DO_
}

void common_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_room.common_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat_room.response_error_code error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_room.common_response)
}

::google::protobuf::uint8* common_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_room.common_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat_room.response_error_code error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_room.common_response)
  return target;
}

size_t common_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_room.common_response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chat_room.response_error_code error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void common_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_room.common_response)
  GOOGLE_DCHECK_NE(&from, this);
  const common_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const common_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_room.common_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_room.common_response)
    MergeFrom(*source);
  }
}

void common_response::MergeFrom(const common_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_room.common_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void common_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_room.common_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void common_response::CopyFrom(const common_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_room.common_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool common_response::IsInitialized() const {
  return true;
}

void common_response::Swap(common_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void common_response::InternalSwap(common_response* other) {
  using std::swap;
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata common_response::GetMetadata() const {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void login_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_request::kAccountFieldNumber;
const int login_request::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_request::login_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_5froom_2eproto::InitDefaultslogin_request();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_room.login_request)
}
login_request::login_request(const login_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:chat_room.login_request)
}

void login_request::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:chat_room.login_request)
  SharedDtor();
}

void login_request::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_request::descriptor() {
  ::protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_request& login_request::default_instance() {
  ::protobuf_chat_5froom_2eproto::InitDefaultslogin_request();
  return *internal_default_instance();
}

login_request* login_request::New(::google::protobuf::Arena* arena) const {
  login_request* n = new login_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_room.login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_room.login_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat_room.login_request.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat_room.login_request.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_room.login_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_room.login_request)
  return false;
#undef DO_
}

void login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_room.login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.login_request.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.login_request.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_room.login_request)
}

::google::protobuf::uint8* login_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_room.login_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.login_request.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.login_request.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_room.login_request)
  return target;
}

size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_room.login_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_room.login_request)
  GOOGLE_DCHECK_NE(&from, this);
  const login_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_room.login_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_room.login_request)
    MergeFrom(*source);
  }
}

void login_request::MergeFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_room.login_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void login_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_room.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_room.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  return true;
}

void login_request::Swap(login_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_request::InternalSwap(login_request* other) {
  using std::swap;
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login_request::GetMetadata() const {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void login_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_response::kErrorCodeFieldNumber;
const int login_response::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_response::login_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_5froom_2eproto::InitDefaultslogin_response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_room.login_response)
}
login_response::login_response(const login_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:chat_room.login_response)
}

void login_response::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _cached_size_ = 0;
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:chat_room.login_response)
  SharedDtor();
}

void login_response::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void login_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_response::descriptor() {
  ::protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_response& login_response::default_instance() {
  ::protobuf_chat_5froom_2eproto::InitDefaultslogin_response();
  return *internal_default_instance();
}

login_response* login_response::New(::google::protobuf::Arena* arena) const {
  login_response* n = new login_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login_response::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_room.login_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool login_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_room.login_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chat_room.response_error_code error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::chat_room::response_error_code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat_room.login_response.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_room.login_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_room.login_response)
  return false;
#undef DO_
}

void login_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_room.login_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat_room.response_error_code error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.login_response.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_room.login_response)
}

::google::protobuf::uint8* login_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_room.login_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat_room.response_error_code error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.login_response.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_room.login_response)
  return target;
}

size_t login_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_room.login_response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // .chat_room.response_error_code error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_room.login_response)
  GOOGLE_DCHECK_NE(&from, this);
  const login_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_room.login_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_room.login_response)
    MergeFrom(*source);
  }
}

void login_response::MergeFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_room.login_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void login_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_room.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_response::CopyFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_room.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  return true;
}

void login_response::Swap(login_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_response::InternalSwap(login_response* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login_response::GetMetadata() const {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void chat_message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chat_message::kFromFieldNumber;
const int chat_message::kToFieldNumber;
const int chat_message::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chat_message::chat_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_5froom_2eproto::InitDefaultschat_message();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_room.chat_message)
}
chat_message::chat_message(const chat_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to().size() > 0) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:chat_room.chat_message)
}

void chat_message::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

chat_message::~chat_message() {
  // @@protoc_insertion_point(destructor:chat_room.chat_message)
  SharedDtor();
}

void chat_message::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void chat_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_message::descriptor() {
  ::protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const chat_message& chat_message::default_instance() {
  ::protobuf_chat_5froom_2eproto::InitDefaultschat_message();
  return *internal_default_instance();
}

chat_message* chat_message::New(::google::protobuf::Arena* arena) const {
  chat_message* n = new chat_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chat_message::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_room.chat_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool chat_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_room.chat_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat_room.chat_message.from"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat_room.chat_message.to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat_room.chat_message.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_room.chat_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_room.chat_message)
  return false;
#undef DO_
}

void chat_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_room.chat_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.chat_message.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.chat_message.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.chat_message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_room.chat_message)
}

::google::protobuf::uint8* chat_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_room.chat_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.chat_message.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.chat_message.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat_room.chat_message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_room.chat_message)
  return target;
}

size_t chat_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_room.chat_message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_room.chat_message)
  GOOGLE_DCHECK_NE(&from, this);
  const chat_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chat_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_room.chat_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_room.chat_message)
    MergeFrom(*source);
  }
}

void chat_message::MergeFrom(const chat_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_room.chat_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void chat_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_room.chat_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_message::CopyFrom(const chat_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_room.chat_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_message::IsInitialized() const {
  return true;
}

void chat_message::Swap(chat_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chat_message::InternalSwap(chat_message* other) {
  using std::swap;
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chat_message::GetMetadata() const {
  protobuf_chat_5froom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5froom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat_room

// @@protoc_insertion_point(global_scope)
